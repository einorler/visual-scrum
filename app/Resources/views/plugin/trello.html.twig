<!DOCTYPE html>
<html>
    <head>
    </head>
    <body>
        {#old jQuery version is needed#}
        <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
        {# Fos JS Routing #}
        <script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
        <script src="{{ path('fos_js_routing_js', { callback: 'fos.Router.setData' }) }}"></script>
        {#Trello API#}
        <script src="https://trello.com/1/client.js?key=057e9f22669385617e72ea851ba12132"></script>
        <script>
            var boardList = [];
            var processedBoardList = [];
            // Needed to handle asynchronous calls to trello API
            var callsSent = 0;
            var callsProcessed = 0;

            $(window).load(function(){
                // Firstly, remove any authentication token if already set
                Trello.deauthorize();

                Trello.authorize({
                    name: "Not VS",
                    expiration: "1hour",
                    scope: {
                        read: 'true',
                        write: 'true'
                    },
                    success: function () {
                        // on success start the initiation of the data acquisition
                        getBoards();
                    },
                    error: error
                });
            });

            // simply calls the API and passes the metadata of boards to `getLists` method
            function getBoards() {
                Trello.get('/members/me/boards/', [], getLists, error)
            }

            // Gets the boardList of each board and passes them for filtering
            var getLists = function(boards) {
                $.each(boards, function(index, board) {
                    // Notifies that an asynchronous call to the API has been sent
                    callsSent++;
                    Trello.get('/boards/' + board.id + '/boardList', [], function(listsArray) {
                        // Notifies that an asynchronous call has been handled
                        callsProcessed++;

                        $.each(listsArray, function(index, list) {
                            if (list.name == 'Backlog') {
                                // Adds a list to the global array
                                board.list = list.id;
                                boardList.push(board);
                            }
                        });

                        // This is called every time, because there is no way of knowing which is the last
                        // asynchronous call to the API
                        processBoards();
                    }, error);
                });
            };

            // Processes the already filter global boardList array.
            function processBoards() {
                // The method is called throughout the building of the boardList array but this ensures that
                // the function will only be processed when all the boardList will are built
                if (callsSent != callsProcessed) {
                    return;
                }
                
                $.each(boardList, function (index, board) {
                    callsSent++;
                    Trello.get('/boardList/' + board.list + '/cards', [], function (cards) {
                        callsProcessed++;

                        board.cards = cards;
                        processedBoardList.push(board);

                        sendData()
                    }, error);
                });
            }

            // Final function for sending data to backend via ajax
            var sendData = function () {
                // Same as before
                if (callsSent != callsProcessed) {
                    return;
                }

                alert(JSON.stringify(boardList));

                // Remove authentication token after all is said and done
//                Trello.deauthorize();
            };

            var error = function () {
                alert('an error occurred!')
            };
        </script>
    </body>
</html>
